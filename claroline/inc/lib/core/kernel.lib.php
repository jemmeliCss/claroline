<?php // $Id$

// vim: expandtab sw=4 ts=4 sts=4:

/**
 * CLAROLINE
 *
 * This library contains the initialization process for the Claroline Kernel. 
 * This is the heart of the Claroline bootstrap.
 *
 * @version     Claroline 1.12 $Revision$
 * @copyright   (c) 2001-2014, Universite catholique de Louvain (UCL)
 * @author      Claroline Team <info@claroline.net>
 * @author      Frederic Minne <zefredz@claroline.net>
 * @license     http://www.gnu.org/copyleft/gpl.html
 *              GNU GENERAL PUBLIC LICENSE version 2 or later
 * @package     kernel.core
 */

require_once __DIR__ . '/../auth/authmanager.lib.php';
require_once __DIR__ . '/../kernel/user.lib.php';
require_once __DIR__ . '/../kernel/course.lib.php';
require_once __DIR__ . '/../kernel/groupteam.lib.php';
require_once __DIR__ . '/../user.lib.php';
require_once __DIR__ . '/claroline.lib.php';
require_once __DIR__ . '/privileges.lib.php';
require_once __DIR__ . '/accessmanager.lib.php';

/**
 * Exception generated by the Claroline Kernel process
 */
class Claro_Kernel_Exception extends Exception {};

/**
 * Class embedding the Claroline kernel initialization process that was 
 * previously inside the claro_init_local file. This class initialize all the 
 * environment variables needed to run the Claroline platform, check access 
 * rights, authenticate and identify users...
 * 
 * @since Claroline 1.12.0
 */
class Claro_Kernel
{
    /**
     * Execute the authentication process or execute the logout if requested
     * @param string|null $login
     * @param string|null $password
     * @return boolean true if the authentication succeeded
     */
    public static function executeAuthenticationProcess( $login, $password )
    {
        // default variables initialization
        $GLOBALS['claro_loginRequested'] = false;
        $GLOBALS['claro_loginSucceeded'] = false;
        $GLOBALS['currentUser'] = false;

        if ( $GLOBALS['logout'] && !empty($_SESSION['_uid']) )
        {    
            // needed to notify that a user has just loggued out
            $GLOBALS['logout_uid'] = $_SESSION['_uid'];
        } // end do logout

        if ( ! empty($_SESSION['_uid']) && ! ($login || $GLOBALS['logout']) )
        {
            if (isset($_REQUEST['switchToUser']))
            {
                if (! empty($_SESSION['_user']['isPlatformAdmin']))
                {
                    if ((bool) $_SESSION['_user']['isPlatformAdmin'] === true)
                    {
                        $targetId = $_REQUEST['switchToUser'];

                        if (user_is_admin($targetId))
                        {
                            exit('ERROR !! You cannot access another administrator account !');
                        }

                        try
                        {
                            $GLOBALS['currentUser'] = Claro_CurrentUser::getInstance($targetId, true);
                            $GLOBALS['currentUser']->saveToSession();

                        }
                        catch (Exception $ex)
                        {
                            exit('ERROR !! Undefined user id: the requested user doesn\'t exist'
                                 . 'at line '.__LINE__);
                        }

                        $_SESSION['_uid']             = $targetId;
                        $_SESSION['isVirtualUser']    = true;
                        $_SESSION['is_platformAdmin'] = $_SESSION['_user']['isPlatformAdmin'];
                        $_SESSION['is_allowedCreateCourse'] = $_SESSION['_user']['isCourseCreator'];
                    }
                } // end is platform admin
            } // end switch user

            // uid is in session => login already done, continue with this value
            $GLOBALS['_uid'] = $_SESSION['_uid'];

            $GLOBALS['is_platformAdmin'] = !empty($_SESSION['is_platformAdmin'])
                ? $_SESSION['is_platformAdmin']
                : false
                ;

            $GLOBALS['is_allowedCreateCourse'] = !empty($_SESSION['is_allowedCreateCourse'])
                ? $_SESSION['is_allowedCreateCourse']
                : false
                ;
        }
        else
        {
            // $GLOBALS['_uid']     = null;   // uid not in session ? prevent any hacking
            $GLOBALS['uidReset'] = false;

            // Unset current user authentication :
            if ( isset( $GLOBALS['_uid'] ) )
            {
                unset( $GLOBALS['_uid'] );
            }

            if ( isset( $_SESSION['_uid'] ) )
            {
                unset( $_SESSION['_uid'] );
            }

            if ( isset( $GLOBALS['_user'] ) )
            {
                unset( $GLOBALS['_user'] );
            }

            if ( isset( $_SESSION['_user'] ) )
            {
                unset( $_SESSION['_user'] );
            }
            
            if ( isset ( $GLOBALS['currentUser'] ) )
            {
                unset ( $GLOBALS['currentUser'] );
            }

            if ( $login && $password ) // $login && $password are given to log in
            {
                // reinitalize all session variables
                session_unset();

                $GLOBALS['claro_loginRequested'] = true;

                try
                {
                    $GLOBALS['currentUser'] = AuthManager::authenticate($login, $password);

                    if ( $GLOBALS['currentUser'] )
                    {
                        $GLOBALS['_uid'] = (int)$GLOBALS['currentUser']->userId;
                        $GLOBALS['uidReset'] = true;
                        $GLOBALS['claro_loginSucceeded'] = true;
                    }
                    else
                    {
                        $GLOBALS['_uid'] = null;
                        $GLOBALS['claro_loginSucceeded'] = false;
                    }
                }
                catch (Exception $e)
                {
                    Console::error("Cannot authenticate user : " . $e->__toString());
                    $GLOBALS['_uid'] = null;
                    $GLOBALS['claro_loginSucceeded'] = false;
                }
            } // end if $login & password
            else
            {
                $GLOBALS['claro_loginRequested'] = false;
            }
        }
        
        return $GLOBALS['claro_loginSucceeded'];
    }
    
    /**
     * Initialize the user and set the platform level privileges
     */
    public static function initializeUser()
    {
        if ( !empty ( $GLOBALS[ '_uid' ] ) ) // session data refresh requested && uid is given (log in succeeded)
        {
            try
            {
                /* if (!$GLOBALS['currentUser'])
                  {
                  $GLOBALS['currentUser'] = Claro_CurrentUser::getInstance($GLOBALS['_uid']);
                  } */

                // User login
                if ( $GLOBALS[ 'uidReset' ] )
                {
                    // Update the current session id with a newly generated one ( PHP >= 4.3.2 )
                    // This function is vital in preventing session fixation attacks
                    // function_exists('session_regenerate_id') && session_regenerate_id();

                    $GLOBALS[ 'cidReset' ] = true;
                    $GLOBALS[ 'gidReset' ] = true;

                    $GLOBALS[ 'currentUser' ] = Claro_CurrentUser::getInstance ( $GLOBALS[ '_uid' ], true );

                    $GLOBALS[ '_user' ] = $GLOBALS[ 'currentUser' ]->getRawData ();

                    // Extracting the user data
                    $GLOBALS[ 'is_platformAdmin' ]       = $GLOBALS[ 'currentUser' ]->isPlatformAdmin;
                    $GLOBALS[ 'is_allowedCreateCourse' ] = ( get_conf ( 'courseCreationAllowed', true ) && $GLOBALS[ 'currentUser' ]->isCourseCreator ) || $GLOBALS[ 'is_platformAdmin' ];

                    $GLOBALS[ 'currentUser' ]->saveToSession ();

                    if ( $GLOBALS[ 'currentUser' ]->firstLogin () )
                    {
                        // first login for a not self registred (e.g. registered by a teacher)
                        // do nothing (code may be added later)
                        $GLOBALS[ 'currentUser' ]->updateCreatorId ();
                        $_SESSION[ 'firstLogin' ] = true;
                    }
                    else
                    {
                        $_SESSION[ 'firstLogin' ] = false;
                    }

                    // RECORD SSO COOKIE
                    // $ssoEnabled set in conf/auth.sso.conf.php
                    if ( get_conf ( 'ssoEnabled', false ) )
                    {
                        FromKernel::uses ( 'sso/cookie.lib' );
                        $boolCookie = SingleSignOnCookie::setForUser ( $GLOBALS[ 'currentUser' ]->userId );
                    } // end if ssoEnabled
                }
                // User in session
                else
                {
                    $GLOBALS[ 'currentUser' ] = Claro_CurrentUser::getInstance ( $GLOBALS[ '_uid' ] );

                    try
                    {
                        $GLOBALS[ 'currentUser' ]->loadFromSession ();
                        $GLOBALS[ '_user' ] = $GLOBALS[ 'currentUser' ]->getRawData ();
                    }
                    catch ( Exception $e )
                    {
                        $GLOBALS[ '_user' ] = null;
                    }
                }
            }
            catch ( Exception $e )
            {
                exit ( 'WARNING !! Undefined user id: the requested user doesn\'t exist '
                    . 'at line ' . __LINE__ );
            }
        }
        else
        {
            // Anonymous, logout or login failed
            $GLOBALS[ '_user' ]                  = null;
            $GLOBALS[ '_uid' ]                   = null;
            $GLOBALS[ 'is_platformAdmin' ]       = false;
            $GLOBALS[ 'is_allowedCreateCourse' ] = false;
        }
        
        return $GLOBALS[ '_uid' ];
    }
    
    /**
     * Initialize the course
     * @throws Claro_Kernel_Exception
     */
    public static function initializeCourse()
    {
        // if the requested course is different from the course in session

        if ( $GLOBALS['cidReq'] && ( !isset($_SESSION['_cid']) || $GLOBALS['cidReq'] != $_SESSION['_cid'] ) )
        {
            $GLOBALS['cidReset'] = true;
            // $GLOBALS['gidReset'] = true;    // As groups depend from courses, group id is reset
        }

        if ( $GLOBALS['cidReset'] ) // course session data refresh requested
        {
            if ( $GLOBALS['cidReq'] )
            {
                $GLOBALS['_course'] = claro_get_course_data($GLOBALS['cidReq'], true);

                if ($GLOBALS['_course'] == false)
                {
                    throw new Claro_Kernel_Exception('WARNING !! The course\'s datas couldn\'t be loaded at line '
                        .__LINE__.'.  Please contact your platform administrator.');
                }

                $GLOBALS['_cid']    = $GLOBALS['_course']['sysCode'];
            }
            else
            {
                $GLOBALS['_cid']    = null;
                $GLOBALS['_course'] = null;
            }

        }
        else // else of if($GLOBALS['cidReset']) - continue with the previous values
        {
            $GLOBALS['_cid'] = !empty($_SESSION['_cid'])
                ? $_SESSION['_cid']
                : null
                ;

            $GLOBALS['_course'] = !empty($_SESSION['_course'])
                ? $_SESSION['_course']
                : null
                ;
        }
        
        return $GLOBALS['_cid'];
    }
    
    /**
     * Initialize the groups main properties in the course
     * @throws Claro_Kernel_Exception
     */
    public static function initializeMainGroupProperties()
    {
        if ( $GLOBALS['cidReset'] ) // course session data refresh requested
        {
            if ( $GLOBALS['cidReq'] )
            {
                $GLOBALS['_groupProperties'] = claro_get_main_group_properties($GLOBALS['_cid']);

                if ($GLOBALS['_groupProperties'] == false)
                {
                    throw new Claro_Kernel_Exception('WARNING !! The group\'s properties couldn\'t be loaded at line '
                        .__LINE__.'.  Please contact your platform administrator.');
                }
            }
            else
            {
                $GLOBALS['_groupProperties'] ['registrationAllowed'] = false;

                $groupToolList = get_group_tool_label_list();

                foreach ( $groupToolList as $thisGroupTool )
                {
                    $thisGroupToolLabel = $thisGroupTool['label'];
                    $GLOBALS['_groupProperties']['tools'][$thisGroupToolLabel] = false;
                }

                $GLOBALS['_groupProperties']['private'] = true;
            }

        }
        else // else of if($GLOBALS['cidReset']) - continue with the previous values
        {
            $GLOBALS['_groupProperties'] = !empty($_SESSION['_groupProperties'])
                ? $_SESSION['_groupProperties']
                : null
                ;
        }
        
        return $GLOBALS['_groupProperties'];
    }
    
    /**
     * Initialize user privileges in the course
     */
    public static function initializeCoursePrivileges()
    {
        if ( $GLOBALS['uidReset'] || $GLOBALS['cidReset'] ) // session data refresh requested
        {
            if ( $GLOBALS['_uid'] && $GLOBALS['_cid'] ) // have keys to search data
            {
                  $_course_user_properties = claro_get_course_user_properties($GLOBALS['_cid'],$GLOBALS['_uid'],true);

                  // would probably be less and less used because
                  // claro_get_course_user_data($GLOBALS['_cid'],$GLOBALS['_uid'])
                  // and claro_get_current_course_user_data() do the same job

                  $GLOBALS['_profileId']      = $_course_user_properties['privilege']['_profileId'];
                  $GLOBALS['is_courseMember'] = $_course_user_properties['privilege']['is_courseMember'];
                  $GLOBALS['is_courseTutor']  = $_course_user_properties['privilege']['is_courseTutor'];
                  $GLOBALS['is_courseAdmin']  = $_course_user_properties['privilege']['is_courseAdmin'];

                  $GLOBALS['_courseUser'] = claro_get_course_user_data($GLOBALS['_cid'],$GLOBALS['_uid']);
            }
            else // keys missing => not anymore in the course - user relation
            {
                // course
                $GLOBALS['_profileId']      = claro_get_profile_id('anonymous');
                $GLOBALS['is_courseMember'] = false;
                $GLOBALS['is_courseAdmin']  = false;
                $GLOBALS['is_courseTutor']  = false;

                $GLOBALS['_courseUser'] = null; // not used
            }

            $GLOBALS['is_courseAllowed'] = (bool)
            (
                ( $GLOBALS['_course']['visibility']
                  && ( $GLOBALS['_course']['access'] == 'public'
                       || ( $GLOBALS['_course']['access'] == 'platform'
                            && claro_is_user_authenticated()
                          )
                     )
                )
                || $GLOBALS['is_courseMember']
                || $GLOBALS['is_platformAdmin']
            ); // here because it's a right and not a state
        }
        else // else of if ($GLOBALS['uidReset'] || $GLOBALS['cidReset']) - continue with the previous values
        {
            $GLOBALS['_profileId'] = !empty($_SESSION['_profileId'])
                ? $_SESSION['_profileId']
                : false
                ;

            $GLOBALS['is_courseMember'] = !empty($_SESSION['is_courseMember'])
                ? $_SESSION['is_courseMember']
                : false
                ;

            $GLOBALS['is_courseAdmin'] = !empty($_SESSION['is_courseAdmin'])
                ? $_SESSION['is_courseAdmin']
                : false
                ;

            $GLOBALS['is_courseAllowed'] = !empty($_SESSION['is_courseAllowed'])
                ? $_SESSION['is_courseAllowed' ]
                : false
                ;

            $GLOBALS['is_courseTutor'] = !empty($_SESSION['is_courseTutor'])
                ? $_SESSION['is_courseTutor']
                : false
                ;

            // not used !?!
            $GLOBALS['_courseUser'] = !empty($_SESSION['_courseUser'])
                ? $_SESSION['_courseUser']
                : null
                ;
        }
        
        return $GLOBALS['_courseUser'];
    }
    
    /**
     * Install missing modules in course if any
     */
    public static function installMissingModulesInCourse()
    {
        if ( $GLOBALS['_cid']
            && trim( $GLOBALS['_cid'] )
            && is_array( $GLOBALS['_course'] )
            && isset($GLOBALS['_course']['dbNameGlu'])
            && !empty($GLOBALS['_course']['dbNameGlu'])
            && trim($GLOBALS['_course']['dbNameGlu']) )
        {
            // 0. load course configuration to avoid creating uneeded examples

            require claro_get_conf_repository() . 'course_main.conf.php';


            // 1. get tool list from main db

            $mainCourseToolList = claro_get_main_course_tool_list();

            // 2. get list af already installed tools from course

            $tbl_mdb_names = claro_sql_get_main_tbl();
            $tbl_tool            = $tbl_mdb_names['tool'           ];

            $sql = " SELECT pct.id                    AS toolId       ,
                          pct.claro_label           AS label

                    FROM `".$GLOBALS['_course']['dbNameGlu']."tool_list` AS ctl
                    INNER JOIN `".$tbl_tool."` AS pct
                    ON `ctl`.`tool_id` = `pct`.`id`
                    WHERE ctl.installed = 'true'";

            $courseToolList = claro_sql_query_fetch_all_rows($sql);

            $tmp = array();

            foreach ( $courseToolList as $thisCourseTool )
            {
                $tmp[$thisCourseTool['label']] = $thisCourseTool['toolId'];
            }

            // 3. compare the two lists and register and install/activate missing tool if necessary

            $listOfToolsToAdd = array();

            foreach ( $mainCourseToolList as $thisToolId => $thisMainCourseTool )
            {
                if ( ! array_key_exists( $thisMainCourseTool['label'], $tmp ) )
                {
                    $listOfToolsToAdd[$thisMainCourseTool['label']] = $thisToolId;
                }
            }

            foreach ( $listOfToolsToAdd as $toolLabel => $toolId )
            {
                if ( ! is_module_registered_in_course( $toolId, $GLOBALS['_cid'] ) )
                {
                    register_module_in_single_course( $toolId, $GLOBALS['_cid'] );
                }

                if ( !is_module_installed_in_course( $toolLabel, $GLOBALS['_cid'] )
                    && 'AUTOMATIC' == get_module_data( $toolLabel, 'add_in_course' ) )
                {
                    install_module_in_course( $toolLabel, $GLOBALS['_cid'] );
                }

                if ( 'AUTOMATIC' == get_module_data( $toolLabel, 'add_in_course' ) )
                {
                    if ( 'activated' == get_module_data( $toolLabel, 'activation' ) )
                    {
                        update_course_tool_activation_in_course( $toolId,
                            $GLOBALS['_cid'],
                            true );

                        set_module_visibility_in_course( $toolId, $GLOBALS['_cid'], true );
                    }
                }
            }
        }
    }
    
    /**
     * Initialize the current tool
     */
    public static function initializeCourseTool()
    {
        // if the requested tool is different from the current tool in session
        // (special request can come from the tool id, or the tool label)

        if (   ( $GLOBALS['tidReq']    && $GLOBALS['tidReq']    != $_SESSION['_tid']                 )
            || ( $GLOBALS['tlabelReq'] && ( ! isset($_SESSION['_courseTool']['label'])
                                 || $GLOBALS['tlabelReq'] != $_SESSION['_courseTool']['label']) )
           )
        {
            $GLOBALS['tidReset'] = true;
        }

        if ( $GLOBALS['tidReset'] || $GLOBALS['cidReset'] ) // session data refresh requested
        {
            if ( ( $GLOBALS['tidReq'] || $GLOBALS['tlabelReq']) && $GLOBALS['_cid'] ) // have keys to search data
            {
                $tbl_mdb_names = claro_sql_get_main_tbl();
                $tbl_tool            = $tbl_mdb_names['tool'           ];

                $sql = " SELECT ctl.id                  AS id            ,
                              pct.id                    AS toolId       ,
                              pct.claro_label           AS label         ,
                              ctl.script_name           AS name          ,
                              ctl.visibility            AS visibility    ,
                              pct.icon                  AS icon          ,
                              pct.access_manager        AS access_manager,
                              pct.script_url            AS url

                           FROM `".$GLOBALS['_course']['dbNameGlu']."tool_list` ctl,
                            `".$tbl_tool."`  pct

                       WHERE `ctl`.`tool_id` = `pct`.`id`
                         AND (`ctl`.`id`      = '". (int) $GLOBALS['tidReq']."'
                               OR   (".(int) is_null($GLOBALS['tidReq'])." AND pct.claro_label = '". claro_sql_escape($GLOBALS['tlabelReq']) ."')
                             )";

                // Note : 'ctl' stands for  'course tool list' and  'pct' for 'platform course tool'
                $GLOBALS['_courseTool'] = claro_sql_query_get_single_row($sql);

                if ( is_array($GLOBALS['_courseTool']) ) // this tool have a recorded state for this course
                {
                    $GLOBALS['_tid']        = $GLOBALS['_courseTool']['id'];
                    $GLOBALS['_mainToolId'] = $GLOBALS['_courseTool']['toolId'];
                }
                else // this tool has no status related to this course
                {
                    $activatedModules = get_module_label_list( true );

                    if ( ! in_array( $GLOBALS['tlabelReq'], $activatedModules ) )
                    {
                        exit('WARNING !! Undefined Tlabel or Tid: your script declare '
                            . 'be a tool wich is not registred at line '.__LINE__.'.  '
                            . 'Please contact your platform administrator.');
                    }
                    else
                    {
                        $GLOBALS['_tid']        = null;
                        $GLOBALS['_mainToolId'] = null;
                        $GLOBALS['_courseTool'] = null;
                    }
                }
            }
            else // keys missing => not anymore in the course - tool relation
            {
                // course
                $GLOBALS['_tid']        = null;
                $GLOBALS['_mainToolId'] = null;
                $GLOBALS['_courseTool'] = null;
            }

        }
        else // continue with the previous values
        {
            $GLOBALS['_tid'] = !empty($_SESSION['_tid'])
                ? $_SESSION['_tid']
                : null
                ;

            $GLOBALS['_mainToolId'] = !empty($_SESSION['_mainToolId'])
                ? $_SESSION['_mainToolId']
                : null
                ;

            $GLOBALS['_courseTool'] = !empty( $_SESSION['_courseTool'])
                ? $_SESSION['_courseTool']
                : null
                ;
        }
        
        
        return $GLOBALS['_courseTool'];
    }
    
    /**
     * Initialize the group
     * @throws Claro_Kernel_Exception
     */
    public static function initializeGroup()
    {
        if ( $GLOBALS['cidReq'] && ( !isset($_SESSION['_cid']) || $GLOBALS['cidReq'] != $_SESSION['_cid'] ) )
        {
            $GLOBALS['gidReset'] = true;    // As groups depend from courses, group id is reset
        }
        // if the requested group is different from the group in session

        if ( $GLOBALS['gidReq'] && ( !isset($_SESSION['_gid']) || $GLOBALS['gidReq'] != $_SESSION['_gid']) )
        {
            $GLOBALS['gidReset'] = true;
        }

        if ( $GLOBALS['gidReset'] || $GLOBALS['cidReset'] ) // session data refresh requested
        {
            if ( $GLOBALS['gidReq'] && $GLOBALS['_cid'] ) // have keys to search data
            {
                $context = array(
                    CLARO_CONTEXT_COURSE => $GLOBALS['_cid'],
                    CLARO_CONTEXT_GROUP => $GLOBALS['gidReq'] );

                $course_group_data = claro_get_group_data($context, true );

                $GLOBALS['_group'] = $course_group_data;

                if ( $GLOBALS['_group'] ) // This group has recorded status related to this course
                {
                    $GLOBALS['_gid'] = $course_group_data ['id'];
                }
                else
                {
                    throw new Claro_Kernel_Exception('WARNING !! Undefined groupd id: the requested group '
                        . ' doesn\'t exist at line '.__LINE__.'.  '
                        . 'Please contact your platform administrator.');
                }
            }
            else  // Keys missing => not anymore in the group - course relation
            {
                $GLOBALS['_gid']   = null;
                $GLOBALS['_group'] = null;
            }
        }
        else // continue with the previous values
        {
            $GLOBALS['_gid'] = !empty($_SESSION ['_gid'])
                ? $_SESSION ['_gid']
                : null
                ;

            $GLOBALS['_group'] = !empty($_SESSION ['_group'])
                ? $_SESSION ['_group']
                : null
                ;
        }
        
        return $GLOBALS['_gid'];
    }
    
    /**
     * Initialize the privileges of the user in the group
     * @throws Claro_Kernel_Exception
     */
    public static function initializeGroupPrivileges()
    {
        if ( $GLOBALS[ 'uidReset' ] || $GLOBALS[ 'cidReset' ] || $GLOBALS[ 'gidReset' ] ) // session data refresh requested
        {
            if ( $GLOBALS[ '_uid' ] && $GLOBALS[ '_cid' ] && $GLOBALS[ '_gid' ] ) // have keys to search data
            {
                $sql = "SELECT status,
                       role
                FROM `" . $GLOBALS[ '_course' ][ 'dbNameGlu' ] . "group_rel_team_user`
                WHERE `user` = '" . (int) $GLOBALS[ '_uid' ] . "'
                AND `team`   = '" . (int) $GLOBALS[ 'gidReq' ] . "'";

                $result = claro_sql_query ( $sql );
                
                if ( !$result )
                {
                    throw new Claro_Kernel_Exception ( 'WARNING !! Load user course_group status (DB QUERY) FAILED ! ' . __LINE__ );
                }

                if ( mysqli_num_rows ( $result ) > 0 ) // This user has a recorded status related to this course group
                {
                    $gpuData = mysqli_fetch_array ( $result );

                    $GLOBALS[ '_groupUser' ] [ 'status' ] = $gpuData [ 'status' ];
                    $GLOBALS[ '_groupUser' ] [ 'role' ] = $gpuData [ 'role' ];

                    $GLOBALS[ 'is_groupMember' ] = true;
                }
                else
                {
                    $GLOBALS[ 'is_groupMember' ] = false;
                    $GLOBALS[ '_groupUser' ]     = null;
                }

                $GLOBALS[ 'is_groupTutor' ] = ($GLOBALS[ '_group' ][ 'tutorId' ] == $GLOBALS[ '_uid' ]);
            }
            else  // Keys missing => not anymore in the user - group (of this course) relation
            {
                $GLOBALS[ 'is_groupMember' ] = false;
                $GLOBALS[ 'is_groupTutor' ]  = false;

                $GLOBALS[ '_groupUser' ] = null;
            }

            // user group access is allowed or user is group member or user is admin
            $GLOBALS[ 'is_groupAllowed' ] = (bool) (!$GLOBALS[ '_groupProperties' ][ 'private' ] || $GLOBALS[ 'is_groupMember' ] || $GLOBALS[ 'is_courseAdmin' ] || claro_is_group_tutor () || $GLOBALS[ 'is_platformAdmin' ]);
        }
        else // continue with the previous values
        {
            $GLOBALS[ '_groupUser' ] = !empty ( $_SESSION[ '_groupUser' ] ) ? $_SESSION[ '_groupUser' ] : null
            ;

            $GLOBALS[ 'is_groupMember' ] = !empty ( $_SESSION[ 'is_groupMember' ] ) ? $_SESSION[ 'is_groupMember' ] : null
            ;

            $GLOBALS[ 'is_groupTutor' ] = !empty ( $_SESSION[ 'is_groupTutor' ] ) ? $_SESSION[ 'is_groupTutor' ] : null
            ;

            $GLOBALS[ 'is_groupAllowed' ] = !empty ( $_SESSION[ 'is_groupAllowed' ] ) ? $_SESSION[ 'is_groupAllowed' ] : null
            ;
        }
        
        return $GLOBALS[ '_groupUser' ];
    }
    
    /**
     * Initialize the privileges of the current user regarding the current tool
     */
    public static function initializeToolPrivileges()
    {
        if ( $GLOBALS[ 'uidReset' ] || $GLOBALS[ 'cidReset' ] || $GLOBALS[ 'gidReset' ] || $GLOBALS['tidReset'] ) // session data refresh requested
        {
            if ( $GLOBALS[ '_tid' ] && $GLOBALS[ '_gid' ] )
            {
                //echo 'passed here';

                $toolLabel = trim ( $GLOBALS[ '_courseTool' ][ 'label' ], '_' );

                $GLOBALS[ 'is_toolAllowed' ] = array_key_exists ( $toolLabel, $GLOBALS[ '_groupProperties' ] [ 'tools' ] ) && $GLOBALS[ '_groupProperties' ] [ 'tools' ] [ $toolLabel ]
                    // do not allow to access group tools when groups are not allowed for current profile
                    && claro_is_allowed_tool_read ( get_tool_id_from_module_label ( 'CLGRP' ), $GLOBALS[ '_profileId' ], $GLOBALS[ '_cid' ] );

                if ( $GLOBALS[ '_groupProperties' ] [ 'private' ] )
                {
                    $GLOBALS[ 'is_toolAllowed' ] = $GLOBALS[ 'is_toolAllowed' ] && ( $GLOBALS[ 'is_groupMember' ] || claro_is_group_tutor () );
                }

                $GLOBALS[ 'is_toolAllowed' ] = $GLOBALS[ 'is_toolAllowed' ] || ( $GLOBALS[ 'is_courseAdmin' ] || $GLOBALS[ 'is_platformAdmin' ] );
            }
            elseif ( $GLOBALS[ '_tid' ] )
            {
                if ( (!$GLOBALS[ '_courseTool' ][ 'visibility' ] 
                    && !claro_is_allowed_tool_edit ( $GLOBALS[ '_mainToolId' ], $GLOBALS[ '_profileId' ], $GLOBALS[ '_cid' ] ) ) 
                    || !claro_is_allowed_tool_read ( $GLOBALS[ '_mainToolId' ], $GLOBALS[ '_profileId' ], $GLOBALS[ '_cid' ] ) )
                {
                    $GLOBALS[ 'is_toolAllowed' ] = false;
                }
                else
                {
                    $GLOBALS[ 'is_toolAllowed' ] = true;
                }
            }
            else
            {
                $GLOBALS[ 'is_toolAllowed' ] = false;
            }
        }
        else // continue with the previous values
        {
            $GLOBALS[ 'is_toolAllowed' ] = !empty ( $_SESSION[ 'is_toolAllowed' ] ) ? $_SESSION[ 'is_toolAllowed' ] : null
            ;
        }
        
        if ( $GLOBALS['_cid'] && $GLOBALS['_tid'] )
        {
            $GLOBALS['is_toolAllowed'] = $GLOBALS['is_toolAllowed'] && claro_is_course_tool_activated( $GLOBALS['_cid'], $GLOBALS['_tid'] );
        }
        
        return $GLOBALS[ 'is_toolAllowed' ];
    }
    
    /**
     * Initialize the list of tools available in the current course for the current user
     */
    public static function initializeCourseToolList()
    {
        if ( $GLOBALS[ 'uidReset' ] || $GLOBALS[ 'cidReset' ] )
        {
            if ( $GLOBALS[ '_cid' ] ) // have course keys to search data
            {
                $GLOBALS[ '_courseToolList' ] = claro_get_course_tool_list ( $GLOBALS[ '_cid' ], $GLOBALS[ '_profileId' ], true, true );
            }
            else
            {
                $GLOBALS[ '_courseToolList' ] = null;
            }
        }
        else // continue with the previous values
        {
            $GLOBALS[ '_courseToolList' ] = !empty ( $_SESSION[ '_courseToolList' ] ) 
                ? $_SESSION[ '_courseToolList' ] 
                : null
                ;
        }
        
        return $GLOBALS[ '_courseToolList' ];
    }
    
    /**
     * Save initialization variables to session 
     */
    public static function saveInitVariablesToSession()
    {
        /* ---------------------------------------------------------------------------
          User info in the platform
          --------------------------------------------------------------------------- */
        $_SESSION[ '_uid' ] = $GLOBALS[ '_uid' ];
        $_SESSION[ '_user' ] = $GLOBALS[ '_user' ];
        $_SESSION[ 'is_allowedCreateCourse' ] = $GLOBALS[ 'is_allowedCreateCourse' ];
        $_SESSION[ 'is_platformAdmin' ] = $GLOBALS[ 'is_platformAdmin' ];

        /* ---------------------------------------------------------------------------
          Course info of $GLOBALS['_cid'] course
          --------------------------------------------------------------------------- */

        $_SESSION[ '_cid' ] = $GLOBALS[ '_cid' ];
        $_SESSION[ '_course' ] = $GLOBALS[ '_course' ];
        $_SESSION[ '_groupProperties' ] = $GLOBALS[ '_groupProperties' ];

        /* ---------------------------------------------------------------------------
          User rights of $GLOBALS['_uid'] in $GLOBALS['_cid'] course
          --------------------------------------------------------------------------- */

        $_SESSION[ '_profileId' ] = $GLOBALS[ '_profileId' ];
        $_SESSION[ 'is_courseAdmin' ] = $GLOBALS[ 'is_courseAdmin' ];
        $_SESSION[ 'is_courseAllowed' ] = $GLOBALS[ 'is_courseAllowed' ];
        $_SESSION[ 'is_courseMember' ] = $GLOBALS[ 'is_courseMember' ];
        $_SESSION[ 'is_courseTutor' ] = $GLOBALS[ 'is_courseTutor' ];

        if ( isset ( $GLOBALS[ '_courseUser' ] ) )
        {
            $_SESSION[ '_courseUser' ] = $GLOBALS[ '_courseUser' ]; // not used
        }

        /* ---------------------------------------------------------------------------
          Tool info of $GLOBALS['_tid'] in $GLOBALS['_cid'] course
          --------------------------------------------------------------------------- */

        $_SESSION[ '_tid' ] = $GLOBALS[ '_tid' ];
        $_SESSION[ '_mainToolId' ] = $GLOBALS[ '_mainToolId' ];
        $_SESSION[ '_courseTool' ] = $GLOBALS[ '_courseTool' ];

        /* ---------------------------------------------------------------------------
          Group info of $GLOBALS['_gid'] in $GLOBALS['_cid'] course
          --------------------------------------------------------------------------- */

        $_SESSION[ '_gid' ] = $GLOBALS[ '_gid' ];
        $_SESSION[ '_group' ] = $GLOBALS[ '_group' ];
        $_SESSION[ 'is_groupAllowed' ] = $GLOBALS[ 'is_groupAllowed' ];
        $_SESSION[ 'is_groupMember' ] = $GLOBALS[ 'is_groupMember' ];
        $_SESSION[ 'is_groupTutor' ] = $GLOBALS[ 'is_groupTutor' ];

        /* ---------------------------------------------------------------------------
          Tool in $GLOBALS['_cid'] course allowed to $GLOBALS['_uid'] user
          --------------------------------------------------------------------------- */

        $_SESSION[ 'is_toolAllowed' ] = $GLOBALS[ 'is_toolAllowed' ];

        /* ---------------------------------------------------------------------------
          List of available tools in $GLOBALS['_cid'] course
          --------------------------------------------------------------------------- */

        $_SESSION[ '_courseToolList' ] = $GLOBALS[ '_courseToolList' ];
        
        return $_SESSION;
    }
    
    /**
     * Populate the Claroline dependency injection container with initialization 
     * variables and initialize the privileges :
     * 
     *  $GLOBALS[ 'claroline' ][ 'user' ]
     *  $GLOBALS[ 'claroline' ][ 'privileges.user' ]
     *  $GLOBALS[ 'claroline' ][ 'course' ]
     *  $GLOBALS[ 'claroline' ][ 'privileges.course' ]
     *  $GLOBALS[ 'claroline' ][ 'group' ] 
     *  $GLOBALS[ 'claroline' ][ 'privileges.group' ]
     */
    public static function populateClarolineDependencyInjectionContainer()
    {
        if ( claro_is_user_authenticated () )
        {
            $GLOBALS[ 'claroline' ][ 'user' ]            = Claro_CurrentUser::getInstance ();
            $GLOBALS[ 'claroline' ][ 'privileges.user' ] = new Claro_UserPrivileges ( $GLOBALS[ 'claroline' ][ 'user' ] );
        }
        else // anonymous user
        {
            $GLOBALS[ 'claroline' ][ 'user' ]            = null;
            $GLOBALS[ 'claroline' ][ 'privileges.user' ] = new Claro_UserPrivileges ( null );
        }

        if ( claro_is_in_a_course () )
        {
            $GLOBALS[ 'claroline' ][ 'course' ]            = Claro_CurrentCourse::getInstance ();
            $GLOBALS[ 'claroline' ][ 'privileges.course' ] = $GLOBALS[ 'claroline' ][ 'privileges.user' ]->getCoursePrivileges ( $GLOBALS[ 'claroline' ][ 'course' ] );
        }

        if ( claro_is_in_a_group () )
        {
            $GLOBALS[ 'claroline' ][ 'group' ]            = Claro_CurrentGroupTeam::getInstance ();
            $GLOBALS[ 'claroline' ][ 'privileges.group' ] = $GLOBALS[ 'claroline' ][ 'privileges.user' ]->getGroupPrivileges ( $GLOBALS[ 'claroline' ][ 'course' ], $GLOBALS[ 'claroline' ][ 'group' ] );
        }
        
        return $GLOBALS[ 'claroline' ];
    }
}
